// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String    @unique
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  workspaces    Workspace[] // User can be assigned tasks
  workspaceMemberships WorkspaceMember[]
  tasks         Task[]    // User can be assigned tasks
  changeRequests TaskChangeRequest[]
  notifications Notification[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id        String   @id @default(cuid())
  name      String
  iconUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects  Project[]
  members   WorkspaceMember[]
  invites   Invite[]
}

model Project {
  id          String    @id @default(cuid())
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks       Task[]    // Project can have multiple tasks
  projectPermissions ProjectPermission[]
}

model Task {
  id          String    @id @default(cuid())
  name        String
  description String?   // Optional task description
  status      String    @default("Backlog") // e.g., "Backlog", "Todo", "In Review", "In Progress", "Done"
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  // Relationships
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assignees   User[]
  changeRequests TaskChangeRequest[]
}

model TaskChangeRequest {
  id            String    @id @default(cuid())
  taskId        String
  task          Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  requesterId   String
  requester     User      @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  
  originalStatus String
  newStatus     String?
  newDueDate    DateTime?
  reason        String?
  
  status        String    @default("PENDING") // PENDING, APPROVED, REJECTED
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  notifications Notification[]
}

model Invite {
  id          String    @id @default(cuid())
  code        String    @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
}

model Notification {
  id                  String    @id @default(cuid())
  userId              String
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  message             String
  isRead              Boolean   @default(false)
  link                String?   // Optional link to navigate to, e.g., a task URL
  
  changeRequestId     String?
  changeRequest       TaskChangeRequest? @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)

  createdAt           DateTime  @default(now())
}

model WorkspaceMember {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role        String    @default("member")
  projectPermissions ProjectPermission[]

  @@unique([workspaceId, userId])
}

model ProjectPermission {
  id          String    @id @default(cuid())
  workspaceMemberId String
  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  projectId   String
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  canView     Boolean   @default(true)
  canEdit     Boolean   @default(false)

  @@unique([workspaceMemberId, projectId])
}
