// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                      String    @id @default(cuid())
  name                    String?
  username                String    @unique
  email                   String?   @unique
  image                   String?
  phone                   String?
  company                 String?
  department              String?
  password                String
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  sessions                Session[]
  workspaces              Workspace[]
  workspaceMemberships    WorkspaceMember[]
  tasks                   Task[]
  changeRequests          TaskChangeRequest[] @relation("Requester")
  processedChangeRequests TaskChangeRequest[] @relation("Processor")
  notifications           Notification[]
  actedInNotifications    Notification[]      @relation("Actor")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Workspace {
  id            String   @id @default(cuid())
  name          String
  iconUrl       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  projects      Project[]
  members       WorkspaceMember[]
  invites       Invite[]
  notifications Notification[]
}

model Project {
  id                 String    @id @default(cuid())
  name               String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  workspaceId        String
  workspace          Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  tasks              Task[]
  projectPermissions ProjectPermission[]
  notifications      Notification[]
}

model Task {
  id             String    @id @default(cuid())
  name           String
  description    String?
  status         String    @default("Backlog")
  dueDate        DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  projectId      String
  project        Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignees      User[]
  changeRequests TaskChangeRequest[]
  notifications  Notification[]
}

model TaskChangeRequest {
  id             String    @id @default(cuid())
  taskId         String
  task           Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  requesterId    String
  requester      User      @relation("Requester", fields: [requesterId], references: [id], onDelete: Cascade)
  originalStatus String
  newStatus      String?
  newDueDate     DateTime?
  reason         String?
  status         String    @default("PENDING")
  processorId    String?
  processor      User?     @relation("Processor", fields: [processorId], references: [id])
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  notifications  Notification[]
}

model Invite {
  id          String    @id @default(cuid())
  code        String    @unique
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
}

model Notification {
  id              String     @id @default(cuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  message         String
  isRead          Boolean    @default(false)
  link            String?
  changeRequestId String?
  changeRequest   TaskChangeRequest? @relation(fields: [changeRequestId], references: [id], onDelete: Cascade)
  workspaceId     String?
  workspace       Workspace? @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  projectId       String?
  project         Project?   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  taskId          String?
  task            Task?      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  actorId         String?
  actor           User?      @relation("Actor", fields: [actorId], references: [id], onDelete: Cascade)
  createdAt       DateTime   @default(now())
}

model WorkspaceMember {
  id                 String    @id @default(cuid())
  workspaceId        String
  workspace          Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  userId             String
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  role               String    @default("member")
  projectPermissions ProjectPermission[]

  @@unique([workspaceId, userId])
}

model ProjectPermission {
  id                String    @id @default(cuid())
  workspaceMemberId String
  workspaceMember   WorkspaceMember @relation(fields: [workspaceMemberId], references: [id], onDelete: Cascade)
  projectId         String
  project           Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  canView           Boolean   @default(true)
  canEdit           Boolean   @default(false)

  @@unique([workspaceMemberId, projectId])
}
